name: terragrunt-plan-and-apply

on:
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: Select desired environment for Terragrunt execution
        options:
          - dev
          - qa
          - prod
        required: true
        default: dev
      account:
        type: choice
        description: Select desired AWS account
        options:
          - dev
          - prod
          - devops
        required: true
        default: dev
      region:
        type: choice
        description: Select AWS region
        options:
          - eu-west-1
          - eu-west-2
          - us-east-1
          - us-east-2
        required: true 
        default: us-east-2
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PUBLISH_RESULTS: true
  TERRAFORM_VERSION: 1.9.8
  TERRAGRUNT_VERSION: 0.68.4
  TFSEC_VERSION: "latest"
  TFLINT_VERSION: "latest"
  SUCCESSFUL_ICON: ✅
  FAILED_ICON: ⚠️
  AWS_REGION: ${{ github.event.inputs.region || 'us-east-2' }}
  ENVIRONMENT: ${{ github.event.inputs.env || 'dev' }}

permissions:
  id-token: write
  issues: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  terraform-plan-and-apply:
    name: "Terragrunt Plan and Apply"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.env || 'dev' }}
    
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Infrastructure Tools
        run: |
          # Install Terraform
          wget -O terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          
          # Install Terragrunt
          wget -q -O /usr/local/bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64"
          chmod +x /usr/local/bin/terragrunt
          
          # Install TFSEC
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install.sh | sh
          
          # Install TFLint
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

          # Verify installations
          terraform version
          terragrunt --version
          tfsec --version
          tflint --version

      - name: Find Terragrunt Configurations
        id: find-terragrunt
        run: |
          TERRAGRUNT_DIRS=$(find . -name "terragrunt.hcl" -exec dirname {} \; | sort -u)
          if [ -z "$TERRAGRUNT_DIRS" ]; then
            echo "Error: No terragrunt.hcl files found in the repository."
            exit 1
          fi
          echo "TERRAGRUNT_DIRS<<EOF" >> $GITHUB_ENV
          echo "$TERRAGRUNT_DIRS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Static Code Analysis
        run: |
          # Terraform format check
          echo "Running terraform fmt check..."
          terraform fmt -recursive -check -diff || true

          # Terragrunt format check
          echo "Running terragrunt hclfmt check..."
          terragrunt hclfmt --terragrunt-check || true

          # TFLint check
          echo "Running TFLint check..."
          for dir in $TERRAGRUNT_DIRS; do
            tflint --recursive --color $dir || true
          done

          # TFSEC security scan
          echo "Running TFSEC security scan..."
          for dir in $TERRAGRUNT_DIRS; do
            tfsec $dir --format default || true
          done

      - name: Terragrunt Init and Validate
        run: |
          for dir in $TERRAGRUNT_DIRS; do
            echo "Processing directory: $dir"
            echo "Running terragrunt init..."
            terragrunt run-all init --terragrunt-non-interactive --terragrunt-working-dir $dir
            
            echo "Running terragrunt validate..."
            terragrunt run-all validate --terragrunt-working-dir $dir
          done

      - name: Terragrunt Plan
        id: plan
        run: |
          for dir in $TERRAGRUNT_DIRS; do
            echo "Running terragrunt plan in $dir"
            terragrunt run-all plan --terragrunt-non-interactive --terragrunt-working-dir $dir
          done

      - name: Request Apply Approval
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ vars.TERRAFORM_APPROVERS }}
          minimum-approvals: 1
          issue-title: "Infrastructure Change Approval Required for ${{ env.ENVIRONMENT }}"
          issue-body: |
            Please review and approve the Terragrunt apply request.
            
            - **Triggered by:** ${{ github.actor }}
            - **Environment:** ${{ env.ENVIRONMENT }}
            - **Region:** ${{ env.AWS_REGION }}
            - **Event:** ${{ github.event_name }}
            - **Branch:** ${{ github.ref_name }}
            - **Workflow URL:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          exclude-workflow-initiator-as-approver: false
          timeout-minutes: 180

      - name: Terragrunt Apply
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        run: |
          for dir in $TERRAGRUNT_DIRS; do
            echo "Running terragrunt apply in $dir"
            terragrunt run-all apply --terragrunt-non-interactive --terragrunt-working-dir $dir
          done

      - name: Generate Results Summary
        if: always() && env.PUBLISH_RESULTS == 'true'
        run: |
          {
            echo "# Infrastructure Change Results"
            echo "## Environment Details"
            echo "- **Environment:** ${ENVIRONMENT}"
            echo "- **Region:** ${AWS_REGION}"
            echo "- **Triggered by:** ${{ github.actor }}"
            echo "- **Event:** ${{ github.event_name }}"
            echo ""
            
            # Include analysis results
            [ -f fmt-output.md ] && cat fmt-output.md
            [ -f hclfmt-output.md ] && cat hclfmt-output.md
            [ -f tflint.md ] && cat tflint.md
            [ -f tfsec.md ] && cat tfsec.md
          } >> $GITHUB_STEP_SUMMARY